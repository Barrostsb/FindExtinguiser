package itext;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JFileChooser;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

import model.Extintor;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PortableDocumentFormat {
	private JFileChooser filechooser;
	private Extintor extintor;
	private ResultSet result;
	private LookAndFeel lnf;
	
	public PortableDocumentFormat(Extintor extintor, ResultSet result) {
		this.extintor = extintor;
		this.result = result;
		this.lnf = UIManager.getLookAndFeel();
		
		try {
	        UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
	}

	public void salvar() {
		filechooser = new JFileChooser();
		filechooser.setSelectedFile(new File("findEXT - " + extintor.getCodigo() + ".pdf"));
        filechooser.setFileFilter(new FileNameExtensionFilter("Arquivos pdf (*.pdf)", "pdf"));

		// abre Dialog para salvar arquivo
		if (filechooser.showSaveDialog(filechooser) == filechooser.APPROVE_OPTION) {
			formatar();
		}
		
		return;
	}
	
	private void formatar() {
		File arquivo = filechooser.getSelectedFile();
		
		if (arquivo == null) {
			// alert
			return;
		}
		
		if(!arquivo.getName().toLowerCase().endsWith(".pdf")) {
			// alert
		    return;
		}
		
	    if (arquivo.exists()) {
			// alert - deseja sobrescrever?
	        return;
	    }
	    
	    try {
		    Document document = new Document(PageSize.A4, 20, 20, 20, 20);
			PdfWriter.getInstance(document, new FileOutputStream(arquivo));
			
			document.addTitle("Relatório de Manutenção de Extintor");
		    document.addSubject("findEXT");
		    document.addKeywords("Extintor, Manutenção, Inspeção, findEXT");
		    document.addAuthor("findEXT");
		    document.addCreator("findEXT");
	
		    document.open();
		    
		    document.add(new Paragraph("Gerenciador de Extintores"));
		    document.add(new Paragraph("Código do extintor: " + extintor.getCodigo()));
		    
		    String tipo = null;
		    switch (extintor.getTipo()) {
    			case 'a' : tipo = "Água"; break;
	    		case 'c' : tipo = "CO2"; break;
	    		case 'e' : tipo = "Espuma Mecânica"; break;
	    		case 'p' : tipo = "Pó Químico"; break;
			}
		    
		    document.add(new Paragraph("Tipo: " + tipo));
		    document.add(new Paragraph("Capacidade: " + extintor.getCapacidade()));

		    PdfPTable table = new PdfPTable(3);
			
		    populate(table);
		    	
		    document.add(table);
			    
			document.close();			

	    } catch (FileNotFoundException | DocumentException e) {
	    	e.printStackTrace();
	    }
	}
	
	private void populate(PdfPTable table) {
		PdfPCell cell;
		
		cell = new PdfPCell(new Phrase("Data de Manutenção"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Tipo"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Local"));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		table.setHeaderRows(1);

		try {
			while (result.next()) {
				table.addCell(result.getString(1));
				table.addCell((result.getString(2) == "m") ? "Manutenção" : "Inspeção");
				table.addCell(result.getString(3));
			}
		} catch (SQLException e) {
			// printar erro
		}
	}

	public void finalize() {
		try {
			UIManager.setLookAndFeel(this.lnf);
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
	}

}
