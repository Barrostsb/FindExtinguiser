package GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JOptionPane;

import model.Usuario;
import dao.UsuarioDAO;

/**
*
* @author ThiMary
*/
public class frmGerenciarUsuario extends javax.swing.JFrame {
	 	
	   // Variables declaration - do not modify
	   private javax.swing.JButton btnAtualizar;
	   private javax.swing.JButton btnCancelar;
	   private javax.swing.JButton btnDeletar;
	   private javax.swing.JButton btnLimpar;
	   private javax.swing.JComboBox cboxLoginPesquisa;
	   private javax.swing.JScrollPane jScrollPane1;
	   private javax.swing.JPanel jpBotoes;
	   private javax.swing.JPanel jpPesquisa;
	   private javax.swing.JPanel jpPrincipal;
	   private javax.swing.JPanel jpTable;
	   private javax.swing.JTable jtblUsuarios;
	   private javax.swing.JLabel lblGerenciarUsuario;
	   private javax.swing.JLabel lblLoginPesquisa;
	   private javax.swing.JLabel lblPesquisa;
	   private javax.swing.JTextField txtPesquisa;
	   private UsuarioDAO business;
	   // End of variables declaration	
	
	 
	   /**
	    * Creates new form frmGerenciarUsuario
	    */
	   public frmGerenciarUsuario() {
		   
		   try {
			   // Data Access Object
			   business = new UsuarioDAO(new Usuario());
		   } catch (SQLException e) {
			   // erro de banco de dados
			   JOptionPane.showMessageDialog(null, "Ocorreu algum erro interno. Tente novamente mais tarde.", "Erro", JOptionPane.ERROR_MESSAGE);
		   }
	       initComponents();
	   }
	
	   /**
	    * This method is called from within the constructor to initialize the form.
	    * WARNING: Do NOT modify this code. The content of this method is always
	    * regenerated by the Form Editor.
	    */
	   @SuppressWarnings("unchecked")
	   // <editor-fold defaultstate="collapsed" desc="Generated Code">
	   private void initComponents() {
	
	       jpPrincipal = new javax.swing.JPanel();
	       lblGerenciarUsuario = new javax.swing.JLabel();
	       jpPesquisa = new javax.swing.JPanel();
	       lblLoginPesquisa = new javax.swing.JLabel();
	       cboxLoginPesquisa = new javax.swing.JComboBox();
	       btnLimpar = new javax.swing.JButton();
	       lblPesquisa = new javax.swing.JLabel();
	       txtPesquisa = new javax.swing.JTextField();
	       jpTable = new javax.swing.JPanel();
	       jScrollPane1 = new javax.swing.JScrollPane();
	       jtblUsuarios = new javax.swing.JTable();
	       jpBotoes = new javax.swing.JPanel();
	       btnDeletar = new javax.swing.JButton();
	       btnAtualizar = new javax.swing.JButton();
	       btnCancelar = new javax.swing.JButton();
	
	       setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	
	       lblGerenciarUsuario.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
	       lblGerenciarUsuario.setText("GERENCIAR  USUÁRIOS");
	
	       javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
	       jpPrincipal.setLayout(jpPrincipalLayout);
	       jpPrincipalLayout.setHorizontalGroup(
	           jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpPrincipalLayout.createSequentialGroup()
	               .addGap(192, 192, 192)
	               .addComponent(lblGerenciarUsuario)
	               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	       );
	       jpPrincipalLayout.setVerticalGroup(
	           jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpPrincipalLayout.createSequentialGroup()
	               .addContainerGap()
	               .addComponent(lblGerenciarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	       );
	
	       jpPesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pesquisa", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
	
	       lblLoginPesquisa.setText("Pesquisar por login");
	       
	       populateJComboBox();
	
	       btnLimpar.setText("Limpar");
	
	       lblPesquisa.setText("Pesquisa");
	
	       javax.swing.GroupLayout jpPesquisaLayout = new javax.swing.GroupLayout(jpPesquisa);
	       jpPesquisa.setLayout(jpPesquisaLayout);
	       jpPesquisaLayout.setHorizontalGroup(
	           jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpPesquisaLayout.createSequentialGroup()
	               .addGroup(jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                   .addGroup(jpPesquisaLayout.createSequentialGroup()
	                       .addGap(55, 55, 55)
	                       .addComponent(lblPesquisa)
	                       .addGap(27, 27, 27)
	                       .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
	                       .addGap(44, 44, 44)
	                       .addComponent(lblLoginPesquisa)
	                       .addGap(67, 67, 67)
	                       .addComponent(cboxLoginPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                   .addGroup(jpPesquisaLayout.createSequentialGroup()
	                       .addGap(291, 291, 291)
	                       .addComponent(btnLimpar)))
	               .addContainerGap(85, Short.MAX_VALUE))
	       );
	       jpPesquisaLayout.setVerticalGroup(
	           jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpPesquisaLayout.createSequentialGroup()
	               .addContainerGap()
	               .addGroup(jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                   .addComponent(lblLoginPesquisa)
	                   .addComponent(cboxLoginPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                   .addComponent(lblPesquisa)
	                   .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	               .addGap(18, 18, 18)
	               .addComponent(btnLimpar)
	               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	       );
	       
	       populateJTable(null, null);
	       
	       jScrollPane1.setViewportView(jtblUsuarios);
	
	       javax.swing.GroupLayout jpTableLayout = new javax.swing.GroupLayout(jpTable);
	       jpTable.setLayout(jpTableLayout);
	       jpTableLayout.setHorizontalGroup(
	           jpTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpTableLayout.createSequentialGroup()
	               .addContainerGap()
	               .addComponent(jScrollPane1))
	       );
	       jpTableLayout.setVerticalGroup(
	           jpTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpTableLayout.createSequentialGroup()
	               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addContainerGap())
	       );
	
	       btnDeletar.setText("Deletar");
	       	
	       btnAtualizar.setText("Atualizar");
	
	       btnCancelar.setText("Cancelar");
	
	       javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
	       jpBotoes.setLayout(jpBotoesLayout);
	       jpBotoesLayout.setHorizontalGroup(
	           jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpBotoesLayout.createSequentialGroup()
	               .addContainerGap()
	               .addComponent(btnCancelar)
	               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	               .addComponent(btnDeletar)
	               .addGap(43, 43, 43)
	               .addComponent(btnAtualizar)
	               .addContainerGap())
	       );
	       jpBotoesLayout.setVerticalGroup(
	           jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(jpBotoesLayout.createSequentialGroup()
	               .addContainerGap()
	               .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                   .addComponent(btnDeletar)
	                   .addComponent(btnAtualizar)
	                   .addComponent(btnCancelar))
	               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	       );
	
	       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	       getContentPane().setLayout(layout);
	       layout.setHorizontalGroup(
	           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(layout.createSequentialGroup()
	               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                   .addGroup(layout.createSequentialGroup()
	                       .addContainerGap()
	                       .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                           .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                           .addComponent(jpPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                           .addComponent(jpTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
	                   .addGroup(layout.createSequentialGroup()
	                       .addGap(20, 20, 20)
	                       .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
	               .addContainerGap())
	       );
	       layout.setVerticalGroup(
	           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	           .addGroup(layout.createSequentialGroup()
	               .addContainerGap()
	               .addComponent(jpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	               .addComponent(jpPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	               .addComponent(jpTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	               .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	               .addContainerGap(17, Short.MAX_VALUE))
	       );
	
	       pack();
	       
	       btnLimpar.addActionListener(new LimparHandler());
	       
	       btnCancelar.addActionListener(new CancelarHandler());
	       btnDeletar.addActionListener(new DeletarHandler());
	       btnAtualizar.addActionListener(new AtualizarHandler());
	       
	   }// </editor-fold>
	   
	   /**
	    * Método para popular JComboBox com usuários
	    */
	   private void populateJComboBox() {
		   try {
			   // vetor de string
	    	   Vector<String> usuarios = new Vector<String>();
	    	   usuarios.add("Todos os usuários");
	    	   
	    	   // armazena e executa query
	    	   business.storage("SELECT usuario FROM usuario WHERE status = 'a'");
	    	   ResultSet result = business.execute();
	    	   
	    	   // enquanto tiver resultados
	    	   while (result.next()) {
	    		   // adiciona ao vetor o usuario
	    		   usuarios.add(result.getString(1));
	    	   }

	    	   // popula JComboBox com vetor
	    	   cboxLoginPesquisa.setModel(new javax.swing.DefaultComboBoxModel(usuarios));
	       } catch (SQLException e) {
	    	   cboxLoginPesquisa.setModel(new javax.swing.DefaultComboBoxModel());
	       }
	   }
	   
	   /**
	    * Método para popular JTable com usuários
	    * @param search pesquisa livre
	    * @param column combobox
	    */
	   private void populateJTable(String search, String column) {
	       try {
	    	   // vetor de string
	    	   Vector<Vector<String>> results;
	    	   
	    	   if (search == null && column == null) {
	    		   // resultados sem pesquisa livre e combobox
	    		   results = business.read();   
	    	   } else {
	    		   if (column == null) {
	    			   // resultados da pesquisa livre
	    			   results = business.read(search);   
	    		   } else {
	    			   // resultados da pesquisa livre e combobox
	    			   results = business.read(search, column);
	    		   }
	    	   }
	    	   
	    	   // vetor de string para receber o cabeçalho do JTable 
	    	   Vector<String> header = new Vector<String>();
	    	   header.add("ID");
	    	   header.add("CPF");
	    	   header.add("NOME");
	    	   header.add("USUÁRIO");
	    	   header.add("EMAIL");
	    	   
	    	   // popula JTable com resultados e cabeçalho
	    	   jtblUsuarios.setModel(new javax.swing.table.DefaultTableModel(results, header));
	    	   
	    	   // esconder a coluna ID
	    	   jtblUsuarios.getColumnModel().getColumn(0).setMaxWidth(0);
	    	   jtblUsuarios.getColumnModel().getColumn(0).setMinWidth(0);
	    	   jtblUsuarios.getColumnModel().getColumn(0).setPreferredWidth(0);
	           
	       } catch (SQLException e) {
	    	   jtblUsuarios.setModel(new javax.swing.table.DefaultTableModel());
	       }
	   }
	   
	   /**
	    * Controller PesquisarHandler responsável pela 
	    * ação de pesquisar usuários do banco de dados
	    */
	   private class PesquisarHandler implements ActionListener {
	      @Override
		   public void actionPerformed(ActionEvent e) {
			   
			   // sem usuario específico marcado na combobox
			   if (cboxLoginPesquisa.getSelectedIndex() == 0) {
			       // pesquisa livre 
				   populateJTable(txtPesquisa.getText(), null);
			   } else {
			   	   // pesquisa combobox
				   populateJTable((String)cboxLoginPesquisa.getSelectedItem(), "usuario");
			   }
		   }
	   }

	   /**
	     * Controller AtualizarHandler responsável pela 
	     * ação de abrir tela de atualização de usuários do banco de dados
	     */
	   private class AtualizarHandler implements ActionListener{

			@Override
			public void actionPerformed(ActionEvent e) {
				int id;
				
				try {
					// retorna o valor da primeira coluna da linha selecionada
					id = Integer.valueOf((String) jtblUsuarios.getValueAt(jtblUsuarios.getSelectedRow(), 0));
					
					// popula usuario com os dados
					Usuario usuario = (Usuario) business.find("Usuario", id);
					
					// abre tela para atualizar usuario
					new frmCadastrarUsuario(usuario).setVisible(true);
				} catch (Exception e1) {
					javax.swing.JOptionPane.showMessageDialog(null, "Nenhum usuário selecionado!");
					return;
				}
			}
	   }
	   
	   /**
	     * Controller DeletarHandler responsável pela 
	     * ação de remover usuários do banco de dados
	     */
	   private class DeletarHandler implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				int id;
				
				try {
					// retorna o valor da primeira coluna da linha selecionada
					id = Integer.valueOf((String) jtblUsuarios.getValueAt(jtblUsuarios.getSelectedRow(), 0));
				} catch (Exception e1) {
					javax.swing.JOptionPane.showMessageDialog(null, "Nenhum usuário selecionado!");
					return;
				}
				
				int opcao = JOptionPane.showConfirmDialog(null,
	                    "Deseja realmente deletar este usuário?", 
	                    "Usuário", 
	                    JOptionPane.YES_NO_OPTION); 

				if (opcao == JOptionPane.YES_OPTION) { // SIM
					try {
						// popula usuario com os dados
						Usuario usuario = (Usuario) business.find("Usuario", id);
						
						// remove usuario
						business.delete(usuario);
						
						// popula a JTable - Refresh
						populateJTable(null, null);
						
						javax.swing.JOptionPane.showMessageDialog(null, "Usuário removido com sucesso!");
					} catch (SQLException e1) {
		    			// erro de banco de dados
		    			JOptionPane.showMessageDialog(null, "Ocorreu algum erro interno. Tente novamente mais tarde.", "Erro", JOptionPane.ERROR_MESSAGE);
					}					
				} else { // NAO 
					return;
				}
			}
		   
	   }
	   
	   /**
	    * Controller LimparHandler responsável pela 
	    * ação de limpar os campos de pesquisa
	    */
	   private class LimparHandler implements ActionListener{
		   @Override
		   public void actionPerformed(ActionEvent e) {
			   txtPesquisa.setText("");
			   cboxLoginPesquisa.setSelectedIndex(0);
		   }
	   }
	   
	   /**
	     * Controller CancelarHandler responsável pela 
	     * ação de fechar a tela de gerenciamento de usuário
	     */
	   private class CancelarHandler implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				dispose();
				new frmPrincipal().setVisible(true);				
			}
	   }
}
